<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="absolute"
				width="580"
				height="430"
				creationComplete="init();" backgroundColor="#C8C8C8" horizontalAlign="center" verticalAlign="middle" >
	<mx:Style source="css/style00/a.css"/>
    <mx:Metadata>
        [ResourceBundle("PhotoUpload")]
    </mx:Metadata>
	<mx:Script>
		<![CDATA[
        import action.ScaleBox;

        import mx.controls.Alert;
        import mx.core.UIComponent;
        import mx.events.CloseEvent;
        import mx.events.ItemClickEvent;
        import mx.graphics.codec.JPEGEncoder;
        import mx.graphics.codec.PNGEncoder;
        import mx.managers.CursorManager;
        import mx.managers.PopUpManager;
        import mx.resources.ResourceBundle;

        //			import flash.filters.BitmapFilter;


        private var imageReference:FileReference = new FileReference();
        private var bitmapData:BitmapData;
        private var imageLoader:Loader = new Loader();
        private static const WIDTH:Number = 367;//347;
        private static const HEIGHT:Number = 388;//361;
        private var imageWidth:Number = 100;
        private var imageHeight:Number = 100;
        private var callbackfun:String;
        private var photoStyle:String;
        private var box:ScaleBox;
        private var sprite:Sprite;
        public static const LINE_WIDTH:Number = 1;
        private var uploadURL:String;
        private var photoURL:String;
        private var photoPathOnServer:String;
        private var flag:Boolean = false;
        private var photoFormat:String;
        private var photoQuality:Number = 100;

        private function initMenu():void {
            var nodayMenu:ContextMenuItem = new ContextMenuItem(resourceManager.getString("PhotoUpload", "version_info"));
            nodayMenu.enabled = false;
            var MyMenu:ContextMenu = new ContextMenu();
            MyMenu.hideBuiltInItems();
            MyMenu.customItems.push(nodayMenu);
            this.contextMenu = MyMenu;
        }

        private function init():void {
            //国际化
            var locale:String = Application.application.parameters.locale;
            resourceManager.localeChain = [ locale ];

            initMenu();

            var postURL:String = Application.application.parameters.url;
            //Alert.show("postURL"+postURL);
            if (postURL) {
                uploadURL = postURL;
            } else {
                uploadURL = ExternalInterface.call("getPostURL");
                //Alert.show("uploadURL"+uploadURL);
            }
            var photo:String = Application.application.parameters.photo;
//            Alert.show("photo"+photo);
            if (photo) {
                photoURL = photo;
            } else {
                photoURL = ExternalInterface.call("getPhotoURL");
                //Alert.show("photoURL"+photoURL);
            }
            var w_s:String = Application.application.parameters.photoWidth;
            if (w_s) {
                imageWidth = Number(w_s);
            } else {
                w_s = ExternalInterface.call("getPhotoWidth");
                imageWidth = Number(w_s);
            }
            var h_s:String = Application.application.parameters.photoHeight;
            if (h_s) {
                imageHeight = Number(h_s);
            } else {
                h_s = ExternalInterface.call("getPhotoHeight");
                imageHeight = Number(h_s);
            }

            photoStyle = Application.application.parameters.photoStyle;
            if (photoStyle) {
                //pass
            } else {
                photoStyle = ExternalInterface.call("getPhotoStyle");
            }

            photoFormat = Application.application.parameters.photoFormat;
            if (photoFormat) {
                //pass
            } else {
                photoFormat = ExternalInterface.call("getPhotoFormat");
            }

            var quality:String = Application.application.parameters.photoQuality;
            if (quality) {
                photoQuality = Number(quality);
            } else {
                quality = ExternalInterface.call("getPhotoQuality");
                photoQuality = Number(quality);
            }

            callbackfun = Application.application.parameters.callback;
            if (callbackfun) {
                //pass
            } else {
                callbackfun = ExternalInterface.call("getCallBackFunction");
            }

            photoPathOnServer = Application.application.parameters.photoPathOnServer;
            if (photoPathOnServer) {
                //pass
            } else {
                photoPathOnServer = ExternalInterface.call("getPhotoPathOnServer");
            }

            if (photoStyle == null || photoFormat == null || quality == null || uploadURL == null || photoURL == null || w_s == null || h_s == null || callbackfun == null || photoPathOnServer == null) {
                var msg:SystemMsg;
                msg = SystemMsg(PopUpManager.createPopUp(this, SystemMsg, true));
                msg.message.text = resourceManager.getString("PhotoUpload", "config_error");
                PopUpManager.centerPopUp(msg);
            }
            //当选取框超出画布范围//modified by james
//				while(imageWidth>WIDTH||imageHeight>HEIGHT){
//					imageWidth*=0.9;
//					imageHeight*=0.9;
//				}

            var s:Sprite = new Sprite();
            var u:UIComponent = new UIComponent();
            u.addChildAt(s, 0);
            imgCanvas.addChild(u);
            box = new ScaleBox(imageWidth, imageHeight, false, photoStyle, s.graphics);
            sprite = new Sprite();

            showUserPhoto();
            toggleBtnBar.selectedIndex = 1;
        }

        private function showUserPhoto():void {
            savePicBtn.enabled = false;
            imgCanvas.removeEventListener(MouseEvent.MOUSE_MOVE, showImg);
            vs.removeEventListener(MouseEvent.MOUSE_MOVE, showImg);
            //show1.source = photoURL;
            if (imageWidth < show1.width && imageHeight < show1.height) {
                show1.width = imageWidth;
                show1.height = imageHeight;
            }
            show1.load(photoURL + "?random=" + Math.random());

            //show1.initialize();
        }

        private function showShotPhoto():void {
            show1.source = null;
            if (flag) {
                imgCanvas.addEventListener(MouseEvent.MOUSE_MOVE, showImg);
                vs.addEventListener(MouseEvent.MOUSE_MOVE, showImg);
                showImg(new MouseEvent(MouseEvent.MOUSE_MOVE));
            }
        }

        private function toggleBarClick(e:ItemClickEvent):void {
            if (e.index == 0) {
                showShotPhoto();
            } else if (e.index == 1) {
                showUserPhoto();
            }
        }

        private function loaderror():void {
            show1.source = "userDefault_160.png"
        }

        private function browseImage():void {
            var imageFilter:FileFilter = new FileFilter(resourceManager.getString("PhotoUpload", "picture_file") + "(*.jpeg;*.jpg;*.png;*.gif)", "*.jpeg;*.jpg;*.png;*.gif");
            imageReference.addEventListener(Event.SELECT, imageSelectedHandler);
            imageReference.browse([imageFilter]);
        }

        private function goto2():void {
            vs.selectedChild = interface2;
            initCamera();
        }

        private function imageSelectedHandler(e:Event):void {
            imageReference.addEventListener(Event.COMPLETE, imageCompleteHandler);
            imageReference.load();
        }

        private function imageCompleteHandler(e:Event):void {
            imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoaderCompleteHandler);
            imageLoader.loadBytes(imageReference.data);
        }

        private function imageLoaderCompleteHandler(e:Event):void {
            var imageBitmap:Bitmap = Bitmap(imageLoader.content);
            showImage(imageBitmap);
        }

        private var bl:Number;

        private function showImage(imageBitmap:Bitmap):void {
            flag = true;
            toggleBtnBar.selectedIndex = 0;
            savePicBtn.enabled = true;
            var bH:int = imageBitmap.height;
            var bW:int = imageBitmap.width;
            var hRatio:Number = bH / HEIGHT;
            var wRatio:Number = bW / WIDTH;
            if (bW > WIDTH || bH > HEIGHT) {
                if (wRatio > hRatio) {
                    bl = wRatio;
                    resizeCanvasAndBox(bW / wRatio, bH / wRatio);

                    //@andy, 显示的图片被缩小显示了，对应的scalebox也要按比例缩小。
                    box.resize(imageWidth / wRatio, imageHeight / wRatio);
                } else {
                    bl = hRatio;
                    resizeCanvasAndBox(bW / hRatio, bH / hRatio);

                    //@andy, 显示的图片被缩小显示了，对应的scalebox也要按比例缩小。
                    box.resize(imageWidth / hRatio, imageHeight / hRatio);
                }
            } else {
                bl = 1;
                resizeCanvasAndBox(bW, bH);

                //@andy, 更换图片时重置scalebox。
                if (bW < imageWidth || bH < imageHeight) {
                    //当图片比选取框小时，按比例适配选取框到图片大小
                    var hRatio2:Number = imageHeight / bH;
                    var wRatio2:Number = imageWidth / bW;
                    if (wRatio2 > hRatio2) {
                        box.resize(imageWidth / wRatio2 - LINE_WIDTH * 2, imageHeight / wRatio2 - LINE_WIDTH * 2);
                    }
                    else {
                        box.resize(imageWidth / hRatio2 - LINE_WIDTH * 2, imageHeight / hRatio2 - LINE_WIDTH * 2);
                    }
                }
                else {
                    box.resize(imageWidth, imageHeight);
                }
            }

            //选取框大于WIDTH或HEIGHT
            if (WIDTH < box.boxWidth || HEIGHT < box.boxHeight)
            {
                var hRatio3:Number = box.boxHeight / HEIGHT;
                var wRatio3:Number = box.boxWidth / WIDTH;
                if (wRatio3 > hRatio3) {
                    box.resize(box.boxWidth / wRatio3, box.boxHeight / wRatio3);
                }
                else {
                    box.resize(box.boxWidth / hRatio3, box.boxHeight / hRatio3);
                }
            }

            bitmapData = imageBitmap.bitmapData;
            img.source = imageBitmap;
            imgCanvas.addChild(box);
            box.maskImage(box.boxWidth, box.boxHeight);
            imgCanvas.addEventListener(MouseEvent.MOUSE_MOVE, showImg);
            vs.addEventListener(MouseEvent.MOUSE_MOVE, showImg);
            showImg(new MouseEvent(MouseEvent.MOUSE_MOVE));
        }

        private function resizeCanvasAndBox(w:Number, h:Number):void {
            img.width = w;
            img.height = h;
            imgCanvas.width = w;
            imgCanvas.height = h;

            /*//modified by james
             if (w < h)
             {
             box.boxWidth=box.boxHeight=w < 99 ? w-1 : 100;
             }
             else
             {
             box.boxWidth=box.boxHeight=h < 99 ? h-1 : 100;
             }
             */

            box.x = 0;
            box.y = 0;
        }

        private var bitmapupload:Bitmap;

        private function showImg(e:MouseEvent):void {
            bitmapupload = new Bitmap(this.getBoxData());
            show1.source = bitmapupload;
            savePicBtn.enabled = true;
        }

        private function getBoxData():BitmapData {
            if (box.getSprite().transform.pixelBounds.width != 0) {
                var rect:Rectangle = new Rectangle(box.x * bl + LINE_WIDTH, box.y * bl + LINE_WIDTH, box.boxWidth * bl, box.boxHeight * bl);
                var bitmapDataTemp:BitmapData = copy(bitmapData, rect);

                //@andy,缩放剪裁的图片到需要的尺寸
                var compressWidth:Number = imageWidth;//图片压缩尺寸
                var compressHeight:Number = imageHeight;//图片压缩尺寸
                var bmd:BitmapData = new BitmapData(compressWidth, compressHeight, true, 0x00FFFFFF);
                var matrix:Matrix = new Matrix();
                var scaleX:Number = compressWidth / bitmapDataTemp.width;
                var scaleY:Number = compressHeight / bitmapDataTemp.height;
                matrix.scale(scaleX, scaleY);
                bmd.draw(bitmapDataTemp, matrix);
                bitmapDataTemp.dispose();
                bitmapDataTemp = null;

                //直角矩形不需要对图片进行额外处理。
                if (this.photoStyle == "ZhiJiaoJuXing") {
                    return bmd;
                }

                //画一个mask（圆角矩形）来剪裁图片
                sprite.graphics.clear();
                sprite.graphics.lineStyle(LINE_WIDTH, 0x000000);
                sprite.graphics.beginFill(0x000000);
                var maskWidth:Number = compressWidth - LINE_WIDTH;
                var maskHeight:Number = compressHeight - LINE_WIDTH;
//                var ellipseWidth:Number = Math.round((maskWidth + maskHeight) / 16);
//                var ellipseHeight:Number = Math.round((maskWidth + maskHeight) / 16);
                sprite.graphics.drawRoundRect(0, 0, maskWidth, maskHeight, 16, 16);
                sprite.graphics.endFill();

                var templateBitmapData:BitmapData = cutOutRect(sprite, maskWidth + LINE_WIDTH, maskHeight + LINE_WIDTH, 0, 0, true, 0x00FFFFFF);

                //提取除空白区间（例如圆角）外的像素。
                for (var pixelY:int = 0; pixelY < templateBitmapData.height; pixelY++) {
                    for (var pixelX:int = 0; pixelX < templateBitmapData.width; pixelX++) {
                        var templateColor:uint = templateBitmapData.getPixel32(pixelX, pixelY);
                        if (templateColor != 0) {
                            var alpha:uint = templateColor >> 24 & 0xFF;
                            var targetColor:uint = bmd.getPixel32(pixelX, pixelY);
                            var targetRGB:uint = targetColor & 0xFFFFFF;
                            var color:uint = alpha << 24 | targetRGB;
                            templateBitmapData.setPixel32(pixelX, pixelY, color);
                        }
                    }
                }
                bmd.dispose();
                bmd = null;

                return templateBitmapData;
            }
            return null;
        }

        public function cutOutRect(target:DisplayObject, width:Number, height:Number, distanceX:Number, distanceY:Number, transparent:Boolean = true, fillColor:uint = 0x00FFFFFF):BitmapData {
            var m:Matrix = target.transform.matrix;
            m.tx -= target.getBounds(target.parent).x + distanceX;
            m.ty -= target.getBounds(target.parent).y + distanceY;

            var bmpData:BitmapData = new BitmapData(width, height, transparent, fillColor);
            bmpData.draw(target, m);

            return bmpData;
        }

        /**
         *  超级裁剪工具！可裁剪任意形状！给定一个裁剪目标和一个模板，就可根据模板裁剪出形状相配的 BitmapData 数据。
         *
         *  @param target 需要裁剪的显示对象。
         *
         *  @param template 裁剪模板，可以是任意形状。
         *
         *  @returns 返回裁剪后的 BitmapData 对象。
         */
        public function cutOutSuper(target:DisplayObject, template:DisplayObject):BitmapData {
            var rectTarget:Rectangle = target.transform.pixelBounds;
            var rectTemplate:Rectangle = template.transform.pixelBounds;
            var targetBitmapData:BitmapData = cutOutRect(target, rectTarget.width, rectTarget.height, 0, 0, true, 0x00FFFFFF);
            var templateBitmapData:BitmapData = cutOutRect(template, rectTemplate.width, rectTemplate.height, 0, 0, true, 0x00FFFFFF);

            for (var pixelY:int = 0; pixelY < rectTemplate.height; pixelY++) {
                for (var pixelX:int = 0; pixelX < rectTemplate.width; pixelX++) {
                    if (templateBitmapData.getPixel32(pixelX, pixelY) != 0) {
                        var color:uint = targetBitmapData.getPixel32(pixelX + rectTemplate.x - rectTarget.x, pixelY + rectTemplate.y - rectTarget.y);
                        templateBitmapData.setPixel32(pixelX, pixelY, color);
                    }
                }
            }

            return templateBitmapData;

        }

        private function copy(target:BitmapData, rect:Rectangle):BitmapData {
            var bitmapData:BitmapData = new BitmapData(rect.width, rect.height, true, 0x00FFFFFF);
            bitmapData.copyPixels(target, rect, new Point(0, 0), null, null, true);
            return bitmapData;
        }

        public function preSavePic():void {
            /*
             if (bitmapupload) {
             mx.controls.Alert.yesLabel = "确定";
             mx.controls.Alert.noLabel = "取消";
             Alert.show("保存后将替换原来的图片","提示", Alert.YES | Alert.NO).addEventListener(CloseEvent.CLOSE,function(evt:CloseEvent):void{
             switch (evt.detail) {
             case Alert.CANCEL:
             return;
             break;
             case Alert.NO:
             return;
             break;
             case Alert.OK:
             savePic();
             break;
             case Alert.YES:
             savePic();
             break;
             }
             });
             } else {
             Alert.show("你还没选择图片", "提示");
             }
             */
            savePic();
        }

        public function savePic():void {

            if (bitmapupload) {
                savePicBtn.enabled = false;
                var url:String = "";
                if (uploadURL != null) {
                    //url="./" + uploadURL;
                    url = uploadURL + "?photoPathOnServer=" + photoPathOnServer + "&photoFormat=" + photoFormat;
                }
                var request:URLRequest = new URLRequest(url);
                request.method = URLRequestMethod.POST;
                request.contentType = "application/octet-stream";

                if (photoFormat == "JPG") {
                    request.data = new JPEGEncoder(photoQuality).encode(bitmapupload.bitmapData);
                }
                else {
                    //PNG格式支持透明。
                    request.data = new PNGEncoder().encode(bitmapupload.bitmapData);
                }

                var loader:URLLoader = new URLLoader();
                CursorManager.setBusyCursor();
                loader.addEventListener(Event.COMPLETE, succHandle);
                loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandle);
                loader.load(request);
            } else {
                Alert.show(resourceManager.getString("PhotoUpload", "no_picture_selected"), resourceManager.getString("PhotoUpload", "hint"));
            }


        }

        private function errorHandle(e:IOErrorEvent):void {
            savePicBtn.enabled = true;
            CursorManager.removeBusyCursor();
            Alert.show(resourceManager.getString("PhotoUpload", "fail_to_connect_server"), resourceManager.getString("PhotoUpload", "hint"));
        }

        private function succHandle(e:Event):void {
            var loader:URLLoader = URLLoader(e.target);
            //var variables:URLVariables = new URLVariables(loader.data);
            var returnVal:String = loader.data;
            CursorManager.removeBusyCursor();
            if (returnVal != "err")
            {
                ExternalInterface.call(callbackfun, returnVal);
            }
            else
            {
                Alert.show(resourceManager.getString("PhotoUpload", "server_error"), resourceManager.getString("PhotoUpload", "hint"));
            }
            savePicBtn.enabled = true;
        }

        private var m_camera:Camera; //定义一个摄像头
        private var m_localVideo:Video; //定义一个本地视频
        private var m_pictureBitmapData:BitmapData; //定义视频截图

        //初始化摄像头
        private var CAMERAWIDTH:int = 400;
        private var CAMERAHEIGHT:int = 300;

        private function initCamera():void {
            if (m_camera == null) {
                m_camera = Camera.getCamera();
                if (m_camera != null) {
                    m_camera.addEventListener(StatusEvent.STATUS, _onCameraStatusHandler);
                    m_camera.setMode(CAMERAWIDTH, CAMERAHEIGHT, 50);
                    m_camera.setQuality(0, 100);
                    m_localVideo = new Video();
                    m_localVideo.width = CAMERAWIDTH;
                    m_localVideo.height = CAMERAHEIGHT;
                    m_localVideo.attachCamera(m_camera);
                    display.addChild(m_localVideo);
                    shot.enabled = true;
                } else {
                    shot.enabled = false;
                    Alert.show(resourceManager.getString("PhotoUpload", "camera_not_found"), resourceManager.getString("PhotoUpload", "hint"), Alert.OK | Alert.NO, this, _initCamera);
                    return;
                }
            }
        }

        //检测摄像头权限事件
        private function _onCameraStatusHandler(event:StatusEvent):void {
            if (!m_camera.muted) {
            } else {
                Alert.show(resourceManager.getString("PhotoUpload", "failure_link_to_camera"), resourceManager.getString("PhotoUpload", "hint"), Alert.OK | Alert.NO, this, _initCamera);
            }
            shot.enabled = true;
            m_camera.removeEventListener(StatusEvent.STATUS, _onCameraStatusHandler);
        }

        //当摄像头不存在，或连接不正常时重新获取
        private function _initCamera(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                initCamera();
            } else {
                backPicture();
            }
        }

        //拍照按钮事件，进行视频截图
        private function snapshotPicture():void {
            m_pictureBitmapData = new BitmapData(CAMERAWIDTH, CAMERAHEIGHT);
            m_pictureBitmapData.draw(display, new Matrix());
            showsnapshot(m_pictureBitmapData);
        }

        private function showsnapshot(bitmapd:BitmapData):void {
            bitmapData = bitmapd;
            var bm:Bitmap = new Bitmap(bitmapd);
            showImage(bm);
            vs.selectedChild = interface1;
            savePicBtn.enabled = true;
        }

        private function backPicture():void {
            vs.selectedChild = interface1;
        }
        ]]>
	</mx:Script>
	<mx:VBox top="1" bottom="1" right="1" left="1">
		<mx:ViewStack id="vs" width="100%" height="100%" creationPolicy="all" borderStyle="none" backgroundColor="#FFFFFF">
            <mx:VBox width="100%" height="100%" horizontalAlign="left" verticalAlign="top" verticalGap="0">
			    <mx:HBox label="{resourceManager.getString('PhotoUpload', 'upload')}" horizontalGap="10" id="interface1" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				    <mx:VBox width="369"
						 height="390"
						 horizontalAlign="center"
						 verticalAlign="middle" borderStyle="solid">
                        <mx:Canvas id="imgCanvas"
                                   width="100%"
                                   height="100%" backgroundColor="#FFFFFF" >
                            <mx:Image id="img">
                            </mx:Image>
                        </mx:Canvas>
				    </mx:VBox>
                    <mx:VBox width="180"
                             height="398"
                             horizontalAlign="center"
                             backgroundColor="#FFFFFF" fontSize="12" paddingTop="8">
                        <mx:Canvas width="162" height="162" backgroundColor="#FFFFFF" cornerRadius="12" borderStyle="none" borderColor="#0096FF" id="showCanvas">
                            <mx:Image width="160" height="160" id="show1" ioError="loaderror()" horizontalCenter="0" verticalCenter="0" >

                            </mx:Image>
                        </mx:Canvas>
                        <mx:HBox paddingBottom="25">
                        <mx:ToggleButtonBar id="toggleBtnBar" itemClick="toggleBarClick(event)"
                                            dataProvider="{[ (resourceManager.getString('PhotoUpload', 'screenshot_preview')),
                                                               (resourceManager.getString('PhotoUpload', 'current_image'))]}">
                            <!--<mx:dataProvider>-->
                                <!--<mx:String>{resourceManager.getString('PhotoUpload', 'screenshot_preview')}</mx:String>-->
                                <!--<mx:String>{resourceManager.getString('PhotoUpload', 'current_image')}</mx:String>-->
                            <!--</mx:dataProvider>-->
                        </mx:ToggleButtonBar>
                        </mx:HBox>
                        <mx:VBox horizontalAlign="center">
                            <mx:HBox width="100%" >
                                <mx:Button label="{resourceManager.getString('PhotoUpload', 'select_picture')}"
                                           click="browseImage();"/>
                                <mx:Label text="{resourceManager.getString('PhotoUpload', 'or')}" />
                                <mx:Button label="{resourceManager.getString('PhotoUpload', 'shoot')}"
                                           click="goto2();" fontWeight="normal" cornerRadius="0"/>
                            </mx:HBox>
                            <mx:Label width="100%" textAlign="center" text="↓" />
                            <mx:HBox width="100%" borderStyle="solid">

                            <mx:Label width="100%" text="{resourceManager.getString('PhotoUpload', 'drag_zoom')}"  textAlign="center" fontWeight="normal" color="#868686"/>
                            </mx:HBox>
                            <mx:Label width="100%" textAlign="center"  text="↓" />
                            <mx:HBox width="100%" >
                            <mx:Button id="savePicBtn" width="100%"
                                       label="{resourceManager.getString('PhotoUpload', 'upload_image')}"
                                       click="preSavePic()" fontWeight="normal" cornerRadius="0"/>
                            </mx:HBox>
                        </mx:VBox>
                    </mx:VBox>
			    </mx:HBox>
                <mx:Label id="tipLabel" text="{resourceManager.getString('PhotoUpload', 'scale_tips')}" fontSize="12"></mx:Label>
            </mx:VBox>
            <mx:HBox label="{resourceManager.getString('PhotoUpload', 'shoot')}"
					 id="interface2"
					  horizontalGap="1"
					 width="100%"
					 height="100%" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10">
				<mx:Canvas id="video"
						   width="100%"
						   height="100%"
						   verticalScrollPolicy="off">
                    <mx:VideoDisplay id="display" width="400" height="300"  backgroundColor="#EBEAEA" horizontalCenter="0" verticalCenter="0"/>
				</mx:Canvas>
				<mx:VBox width="120"
						 height="100%" verticalAlign="bottom" paddingBottom="40" horizontalAlign="center">
					<mx:HBox >
					<mx:Button fontWeight="normal" id="shot" label="{resourceManager.getString('PhotoUpload', 'shoot')}" click="snapshotPicture()" height="80" width="80" fontSize="14"  cornerRadius="0"/>
					</mx:HBox>
					<mx:HBox >
					<mx:Button fontWeight="normal" id="back" label="{resourceManager.getString('PhotoUpload', 'return')}" click="backPicture()" height="25" width="80" fontSize="12"  cornerRadius="0"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
		</mx:ViewStack>
	</mx:VBox>
</mx:Application>

